1.当遇到一些bug时，可能是应用中一些状态或数据的管理不当。因为状态管理不当是导致
bug 产生的主要原因，如果我们能找到一个更好的方式去管理应用状态。那么理论上就能减少Bug数量
redux的目标就是使应用中的状态管理更加可预测。
2.
？react就是擅长管理状态的，那么react擅长管理状态，那么为什么需要redux呢？
有两个原因：
第一是：shared state .要是两个组件依赖相同的状态那该怎么办？在这里将会教你将此状态
提升至最近的父组件，这种策略在大部分时间都是有效的。但是要是最接近父组件的是该组件下的第3级或
第4级组件呢？那么你需要非常痛苦的将这些数据通过各级组件的props向下传递3或4层，这些组件不需要数据
但是又不得不通过他们将数据传递给子组件。相较于通过这些中间组件传递数据，你可以直接告诉redux
那些组件需要那些数据redux会自动管理其余细节。

第二：缓存。从本质上来说redux可以更轻松地缓存API调用或昂贵的操作，这些操作会使
应用有更好的用户体验。虽然创建一个react应用不一定需要redux,但他的确会让一些事情
变得更加容易



3.
Redux 的基本原则之一是存在单一数据源：Store。也就是说，Store 包括应用的全局状态，全存储在一个对象树中。

只有单个状态树，对于应用的很多方面都有好处。假设在构建应用时尝试实现撤消/重做功能。如果所有状态都存储在一个树（单一数据源）中，则实现起来比数据分散在多个组件中简单多了。状态集中到一个位置后，调试和检测过程也会简单很多！

为了保持这种单一数据源特性，Redux 制定了几条规则，确保一切尽在掌控。规则一：Redux 应用中的状态是只读的，即 Redux 状态 不可变。例如，React 组件不能直接写入 Redux 状态，而是发出 intent 来更新状态。

实际上，只有叫做 reducer 的纯函数能够更改状态。暂时别担心这些概念，我们会在下节课深入讲解的！


4.
不管你信不信，Redux 可以用于 React 之外的其他项目！

Redux 的确会实现单个状态树。将所有数据放在一个位置并通过一个界面进行维护后，调试和处理数据变得更加简单。